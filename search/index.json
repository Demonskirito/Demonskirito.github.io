[{"content":"建站技术 | HUGO + GitHub 创建博客页面 1.前言 我通过参考大量的hugo框架的使用，最后终于在收集整理并使用得出了较好的部署方式。 先将我使用到的网站地址全放在前言供大家查阅与使用（并附带说明）。\n简略建站的前提文章： 【Hugo】Hugo + Github 免费部署自己的博客\n后续跟进的博客内容文章： 建站技术 | 使用 Hugo + Stack 简单搭建一个博客\n我主要使用了这两篇博客的内容，其中详细的使用我会娓娓道来。\n2.hugo下载 下载地址：标签 · gohugoio/hugo\n3.搭建博客 3.1 在hugo.exe所在文件夹的地址栏敲打cmd，然后Enter唤起命令行 3.2 敲打命令hugo new site xxxx创建hugo文件 3.3 敲打命名cd xxxx切换目录，并把hugo.exe复制到刚生成的文件夹中 3.4 敲打命令hugo server -D启动服务，访问http://localhost:1313，Ctrl+C停止服务 3.5 配置主题 主题下载地址：Complete List | Hugo Themes\n我们这里以stack主题为例：发行版 · CaiJimmy/hugo-theme-stack\n这边以【Stack主题】为例，将下载好的主题解压，放到/themes文件夹中并将文件夹重新命名为hugo-theme-stack\n将exampleSite样例数据中的 Content 和 hugo.yaml 复制到主文件夹中，并删掉hugo.toml和content/post/rich-content\n再次启动hugo服务，查看主题，具体主题配置修改 hugo.yaml，这里不细说，感兴趣可自行查找相关文章\n至此，在本地搭建一个博客已经完成了\n3.6 了解hugo框架的逻辑 因为本人在借鉴他人的博客时，其实还是会有许多不懂的地方，所以就对结构进行了些许分析，希望能给后续读者提供一些帮助。\n在archetypes下是生成markdown文件的模板\n可以和我的模板使用一样\ncategories.md 和 tags.md\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 --- title: \u0026#34;{{ replace .Name \u0026#34;-\u0026#34; \u0026#34; \u0026#34; | title }}\u0026#34; slug: \u0026#34;{{ replace .Name \u0026#34;-\u0026#34; \u0026#34; \u0026#34; | title }}\u0026#34; description: image: cover.png style: background: \u0026#34;#2a9d8f\u0026#34; color: \u0026#34;#fff\u0026#34; --- default.md\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 --- title: \u0026#34;{{ replace .Name \u0026#34;-\u0026#34; \u0026#34; \u0026#34; | title }}\u0026#34; slug: \u0026#34;{{ replace .Name \u0026#34;-\u0026#34; \u0026#34; \u0026#34; | title }}\u0026#34; description: date: \u0026#34;{{ .Date }}\u0026#34; lastmod: \u0026#34;{{ .Date }}\u0026#34; image: cover.png math: license: hidden: false draft: false categories: [\u0026#34;\u0026#34;] tags: [\u0026#34;\u0026#34;] --- ## 附录 ### 参考文献 ### 版权信息 在content下的是分类，导航栏，博客的发布首页\n一般我们的博客发布都在content/post这个文件夹中\n而图中的img文件夹是我们的头像的存放地址，可以直接将avatar.png替换掉，也可以像我一样放进去图片后去yaml文件中改配置类。\n4.hugo.yaml 4.1 配置导航栏左侧的图标并能够响应 话不多说，先上代码\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 social: - identifier: github name: GitHub url: https://github.com/Demonskirito params: icon: github - identifier: twitter name: Twitter url: https://twitter.com params: icon: twitter - identifier: bilibili name: bilibili url: https://space.bilibili.com/268011948 params: icon: bilibili-line - identifier: email name: Email url: mailto:wh2919907118@gamil.com params: icon: email 这是我的导航栏图标配置，在这里我使用的svg是从iconfont-阿里巴巴矢量图标库获取的，svg的尺寸设置24寸，颜色选择#2c3e50，将下载下来的图标放到 \\assets\\icons\\ 文件夹（themes下的）下，然后修改社交媒体的配置。\n将所有的 #2c3e50 都替换成 currentColor，也就是使用样式设置的颜色。\n4.2配置评论功能 博客中的评论系统是很重要的。这里我使用的是 Stack 模板支持的 Waline，搭建很简单，可以参考 Waline 官方指南\n配置 Waline 则可以参考这篇博客 hugo：添加评论功能（Waline） - 建站指南，我的 Waline 配置：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 comments: enabled: true provider: waline waline: # 这里填你的vercel服务器地址。 # vercel自定义域名会和cloudflare会冲突导致无限301,所以干脆直接用送的域名了 # 注意要部署总域名，而不是最新部署的版本域名（中间有一段随机英文字符的），否则会报 401 Unauthorized serverURL: https://waline-你的用户名.vercel.app/ lang: zh-CN # 文章浏览量统计，在新版waline中已更名为pageview属性，貌似用不了了 # 填入false代表不启用，填入字符串的时候会作为css选择器 visitor: false # 头像来源，在V2中已移除该属性 avatar: emoji: - https://npm.elemecdn.com/@waline/emojis@1.1.0/bilibili - https://npm.elemecdn.com/@waline/emojis@1.1.0/bmoji - https://npm.elemecdn.com/@waline/emojis@1.1.0/weibo # 回复时必填的内容 requiredMeta: - name - email - url # 评论框的默认的文字 placeholder: 欢迎留下宝贵的评论！ # 自定义语言设置，参考https://waline.js.org/cookbook/customize/locale.html#locale-%E9%80%89%E9%A1%B9 locale: admin: 站长 sofa: 还没有人评论哦！快来抢沙发吧~ LeadCloud的部署还是非常简单的，建议使用国际版，畅通无阻啊\nVercel的部署，你需要先去登录注册后在去拉取waline的项目创建进入github中\n创建的时候页面应该如下图：\n我是按照文献的步骤一步步来的，所以没有问题，大家安心配就行。\n5.使用 Hugo 创建文章 为了更加快捷的创建文章，我这里将命令简化为bat指令，一共三个bat\n创建标签.bat\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 @echo off :: 显示创建标签提示 echo [创建标签] :: 提示输入标签名 set /p input=请输入标签名: :: 检查用户是否输入内容 if \u0026#34;%input%\u0026#34;==\u0026#34;\u0026#34; ( echo 标签名不能为空，请重新运行脚本。 pause exit /b ) :: 使用 Hugo 创建标签 hugo new tags/%input%/_index.md :: 暂停脚本，等待用户 创建类别.bat\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 @echo off :: 显示创建类别提示 echo [创建类别] :: 提示输入类别名 set /p input=请输入类别名: :: 检查用户是否输入内容 if \u0026#34;%input%\u0026#34;==\u0026#34;\u0026#34; ( echo 类别名不能为空，请重新运行脚本。 pause exit /b ) :: 使用 Hugo 创建类别 hugo new categories/%input%/_index.md :: 暂停脚本，等待用户确认 pause 创建文章.bat\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 @echo off :: 创建文章 echo [创建文章] :: 提示输入 Slug set /p input=请输入文章 Slug: :: 获取当前日期时间 for /f \u0026#34;tokens=2 delims==\u0026#34; %%i in (\u0026#39;wmic os get localdatetime /value ^| find \u0026#34;=\u0026#34;\u0026#39;) do set datetime=%%i set year=%datetime:~0,4% set month=%datetime:~4,2% set day=%datetime:~6,2% :: 使用 Hugo 创建新文章 hugo new post/%year%/%month%%day%-%input%/index.md :: 暂停脚本，等待用户确认 pause 6.生成静态网页 在完成编写之后，就可以生成网页了。\n运行以下命令：\n1 hugo 或携带一些参数\n1 hugo --theme=stack --baseUrl=\u0026#34;https://blog.reincarnatey.net/\u0026#34; 随后可以看到根目录下出现了 public 文件夹，该文件夹下就是生成的静态网页。你可以将该文件夹内的文件上传到服务器，或是 push 到你的 github 仓库部署到你使用的托管服务，访问你的域名就可以看到了。\n7.将博客项目部署到GitHub上 先创建一个仓库\n以下是我创建好后传入仓库的图片 创建仓库时以\u0026lt;用户名小写\u0026gt;.github.io，例如我叫Demonskirito 仓库就命名为 demonskirito.github.io\n在项目中将已生成的静态代码的文件夹（public）上传至当前仓库即可\n1 2 3 4 5 6 7 ##先进入public文件夹 git init git add . git commit -m\u0026#34;我的博客\u0026#34; git remote add origin https://github.com/Demonskirito/demonskirito.github.io.git git branch -M main git push -u origin main 在上传https时我经常会遇见这个问题\n1 E:\\Study\\blog-hugo\\hugo-test\\public\u0026gt;git push -u origin main fatal: unable to access \u0026#39;https://github.com/Demonskirito/demonskirito.github.io.git/\u0026#39;: Failed to connect to 127.0.0.1 port 7897 after 2084 ms: Couldn\u0026#39;t connect to server 可以通过以下方法解决\n清除 Git 全局代理设置\n1 2 git config --global --unset http.proxy git config --global --unset https.proxy 清除系统代理（如果设置了环境变量） 在 Windows 中，打开命令提示符（cmd）或 PowerShell，执行：\n1 2 set http_proxy= set https_proxy= 检查直接访问 GitHub 测试是否可以直接访问 GitHub：\n1 curl https://github.com 重新尝试 Git 推送 如果可以直接访问，重新推送代码：\n1 git push -u origin main 实在不行就改用 SSH 连接，这个肯定行\n1 2 3 git remote set-url origin git@github.com:Demonskirito/demonskirito.git git push origin master 当我们将项目推送上github上后，我们就可以去访问demonskirito.github.io，这时你就可以发现我们成功访问我们的前端页面。\n对于github的项目，我们也可以去绑定域名使用。\n8.GitHub仓库绑定域名 8.1 namecheap解析DNS、GitHub配置域名 我使用的是外国域名的提供网站namecheap，在这里你可以买到外国域名，并配置解析dns\n这里我们来详细的说说如何用namecheap解析github pages\n我们在namecheap中添加CNAME记录\n添加一个新的 DNS 记录：\n记录类型：CNAME 主机名（或名称/别名）：www 值（或目标/指向）：demonskirito.github.io TTL：默认即可（通常为 300 秒或 自动）。 8.2 验证根域名（可选） 如果你想让 wuhan.com（不带 www）也指向 GitHub Pages：\n通过 GitHub 的官方推荐，你需要配置一个 A 记录 指向以下 GitHub Pages 的 IP 地址：\n185.199.108.153 185.199.109.153 185.199.110.153 185.199.111.153 配置示例：\n记录类型：A 主机名：@（或留空） 值：上述 IP 地址之一（重复添加多个记录，每条记录对应一个 IP 地址） 如果域名服务商支持 ALIAS 或 ANAME，你可以使用它们直接指向 demonskirito.github.io，但大多数情况下直接使用上述 A 记录即可。\n8.3 等待 DNS 生效 DNS 修改后可能需要一些时间传播，通常 10 分钟到 24 小时不等。你可以使用以下命令检查 DNS 是否正确：\n1 nslookup www.wuhan.com 应该返回以下类似的结果\n1 CNAME demonskirito.github.io 8.4 验证访问 通过浏览器访问 www.wuhan.com 确认是否正确指向你的 GitHub Pages。 如果依然出现问题，请检查 DNS 配置是否生效，或使用工具（如 https://dnschecker.org）验证你的 DNS 配置。 9.参考文献 Hugo+github部署：\n使用Hugo+Github从0开始免费搭建个人博客_hugo github-CSDN博客\n建站技术 | 使用 Hugo + Stack 简单搭建一个博客\n【Hugo】Hugo + Github 免费部署自己的博客\n10.版权信息 该博客归Demonskirito所有\n","date":"2024-12-16T10:30:44+08:00","image":"https://demonskirito.github.io/cover.png","permalink":"https://demonskirito.github.io/p/1216-blog/","title":"1216 Blog"}]