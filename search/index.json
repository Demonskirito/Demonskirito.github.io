[{"content":"介绍 紧接上文的熔断器，往 spring cloud 项目中写入网关模块\n这是项目的整体架构，还没有写入自定义的网关过滤类，但可以使用一些自带的过滤服务\n先创建一个启动类 GatewayMain9527\n1 2 3 4 5 6 7 8 9 10 11 package com.gaolang; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; @SpringBootApplication public class GatewayMain9527 { public static void main(String[] args) { SpringApplication.run(GatewayMain9527.class,args); } } 再创建一个配置类 application.yml\n参考 SpringCloud-Gateway 网关的使用_gateway 搭建网关-CSDN 博客\n这里可以看到，我们在 routes（网关路由）下配置了 filters（过滤器）。\nStripPrefix=1：表示从请求的 URI 中去除前缀的数量。在这里，1 表示去除两级路径的前缀。例如，如果原始请求是 /path1/rest-of-the-uri，使用此配置后，转发到后端的请求 URI 将是 /rest-of-the-uri。 AddRequestHeader=test_header, damon0806：表示在请求头中添加一个自定义的头部。具体来说，它添加了一个名为 test_header 的头部，其值为 damon0806。这可以用于在请求发送到后端服务时传递额外的信息或标识。\n发现有点问题就用 AddResponseHeader 代替了，看 get 拉取的数据中的请求头中是否包含了这些数据。StripPrefix=1 这个加上后会出大问题\u0026hellip;\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 server: port: 9527 spring: application: name: cloud-gateway9527 cloud: nacos: server-addr: localhost:8848 gateway: discovery: locator: enabled: true # 开启自动路由 routes: # 网关路由配置 - id: gateway-service # 路由id，自定义，唯一 uri: lb://cloud-customer-order80 # 路由的目标地址，lb表示负载均衡 predicates: # 路由断言，判断请求是否符合路由规则 - Path=/customer/** # 要求请求路径以/user/开头，否则404 filters: - AddResponseHeader=foo, bar-config-response 依赖导入这几个就够了\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 ​ \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.cloud\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-cloud-starter-gateway\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.alibaba.cloud\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-cloud-starter-alibaba-nacos-discovery\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!--客户端负载均衡loadbalancer--\u0026gt; \u0026lt;!-- https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud- starter-loadbalancer --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.cloud\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-cloud-starter-loadbalancer\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; 写完以上所有部分我们就可以开始测试阶段了\n测试 在测试前我们可以看一下 nacos 我们的模块有没有注册成功\n我们用 postman 进行测试接口的访问\n这里可以看出来我们是成功了\nGateWay 过滤器（Filter） 新建一个过滤器类\n1 MyGlobalFilter 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 package com.gaolang.filter; import org.springframework.cloud.gateway.filter.GatewayFilterChain; import org.springframework.cloud.gateway.filter.GlobalFilter; import org.springframework.core.Ordered; import org.springframework.http.HttpStatus; import org.springframework.stereotype.Component; import org.springframework.web.server.ServerWebExchange; import reactor.core.publisher.Mono; @Component public class MyGlobalFilter implements GlobalFilter, Ordered { @Override public Mono\u0026lt;Void\u0026gt; filter(ServerWebExchange exchange, GatewayFilterChain chain) { String username = exchange.getRequest().getQueryParams().getFirst(\u0026#34;username\u0026#34;); if (username == null) { exchange.getResponse().setStatusCode(HttpStatus.NOT_ACCEPTABLE); return exchange.getResponse().setComplete(); } // 放行 return chain.filter(exchange); } // 表示排名 @Override public int getOrder() { return 0; } } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 package com.gaolang.filter; import org.springframework.cloud.gateway.filter.GatewayFilterChain; import org.springframework.cloud.gateway.filter.GlobalFilter; import org.springframework.core.Ordered; import org.springframework.stereotype.Component; import org.springframework.web.server.ServerWebExchange; import reactor.core.publisher.Mono; @Component public class MyGlobalFilter implements GlobalFilter, Ordered { @Override public Mono\u0026lt;Void\u0026gt; filter(ServerWebExchange exchange, GatewayFilterChain chain) { System.out.println(\u0026#34;自定义全局过滤器执行了~~~\u0026#34;); return chain.filter(exchange);//放行 } /** * 过滤器排序 * @return 数值越小 越先执行 */ @Override public int getOrder() { return 0; } } 这需要 IP 端口后加入 Param 例如：该 filter 便需要用户加入 username=wuhan\n看控制台输出，说明我的过滤类启用了。\n","date":"2024-12-19T17:00:16+08:00","permalink":"http://localhost:1313/p/spring-cloud-gateway%E7%9A%84%E4%BD%BF%E7%94%A8/","title":"Spring Cloud Gateway的使用"},{"content":"为什么我会将 Hystrix 的熔断器换成 resilience4j，因为尝试了半天发现虽然 Hystrix 的熔断器可以正常使服务降级，单个 api 接口可以返回 fallback 错误信息，但是不能使得服务熔断，具体原因可能就是注解失效，被放弃了，所以后面边将熔断器换成了当前的熔断器 resilience4j\n具体可以看看这篇博客，这篇博客详细写了如何使用 resilience4j 熔断器去使服务下降和服务熔断。 OpenFeign 熔断与降级_openfeign 熔断降级-CSDN 博客\n紧接上文的熔断器使服务降级\nresilience4j 的依赖下载：\n1 2 3 4 \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.cloud\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-cloud-starter-circuitbreaker-resilience4j\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; 架构如图所示：\nIProductClientServiceFallbackFactory 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 package com.gaolang.fallback; import com.gaolang.FeignClient.OrderFeignClient; import com.gaolang.entities.CommonResult; import com.gaolang.entities.Payment; import org.springframework.cloud.openfeign.FallbackFactory; import org.springframework.stereotype.Component; public class IProductClientServiceFallbackFactory implements FallbackFactory\u0026lt;OrderFeignClient\u0026gt; { @Override public OrderFeignClient create(Throwable cause) { return new OrderFeignClient() { @Override public CommonResult create(Payment payment) { return new CommonResult\u0026lt;\u0026gt;(444,\u0026#34;服务降级返回,---PaymentFallbackService\u0026#34;); } @Override public CommonResult getPaymentById(Long id) { return new CommonResult\u0026lt;\u0026gt;(444,\u0026#34;服务降级返回,---PaymentFallbackService\u0026#34;); } }; } } OrderFeignClient 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 package com.gaolang.FeignClient; import com.gaolang.entities.CommonResult; import com.gaolang.entities.Payment; import com.gaolang.fallback.IProductClientServiceFallbackFactory; import org.springframework.cloud.openfeign.FeignClient; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.PathVariable; import org.springframework.web.bind.annotation.PostMapping; @FeignClient(value = \u0026#34;cloud-provider-payment8001\u0026#34;, fallbackFactory = IProductClientServiceFallbackFactory.class) // 指定调用的服务名称 public interface OrderFeignClient { @PostMapping(value = \u0026#34;/payment/create\u0026#34;) CommonResult create(Payment payment); // 创建支付记录 @GetMapping(value = \u0026#34;/payment/{id}\u0026#34;) CommonResult getPaymentById(@PathVariable(\u0026#34;id\u0026#34;) Long id); // 根据 ID 获取支付记录 } FallbackConfig 1 2 3 4 5 6 7 8 9 10 11 package com.gaolang.config; import com.gaolang.fallback.IProductClientServiceFallbackFactory; import org.springframework.context.annotation.Bean; public class FallbackConfig { @Bean public IProductClientServiceFallbackFactory iArticleClientFallbackFactory() { return new IProductClientServiceFallbackFactory(); } } OrderMain80 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 package com.gaolang; import com.gaolang.config.FallbackConfig; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; import org.springframework.cloud.client.circuitbreaker.EnableCircuitBreaker; import org.springframework.cloud.client.loadbalancer.LoadBalanced; //import org.springframework.cloud.netflix.hystrix.EnableHystrix; import org.springframework.cloud.openfeign.EnableFeignClients; import org.springframework.context.annotation.Bean; import org.springframework.web.client.RestTemplate; @SpringBootApplication @EnableFeignClients(basePackages = \u0026#34;com.gaolang\u0026#34;, defaultConfiguration = FallbackConfig.class) public class OrderMain80 { public static void main(String[] args) { SpringApplication.run(OrderMain80.class,args); } @LoadBalanced // 使 RestTemplate 自动支持 Ribbon 负载均衡 @Bean public RestTemplate restTemplate() { return new RestTemplate(); } } 单启动该模块后，对 api 进行测试 http://localhost:80/customer/payment/1后的结果如图所示：\n成功使得服务熔断。\n","date":"2024-12-19T16:53:03+08:00","permalink":"http://localhost:1313/p/spring-cloud%E7%9A%84%E6%9C%8D%E5%8A%A1%E7%86%94%E6%96%ADresilience4j/","title":"Spring Cloud的服务熔断（resilience4j）"},{"content":"在消费者中加入依赖\n1 2 3 4 5 6 \u0026lt;!--熔断器--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.cloud\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-cloud-starter-netflix-hystrix\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;2.1.5.RELEASE\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; 在启动类中加入注解@EnableCircuitBreaker 和@EnableHystrix\n所以改变后的启动类在继上一篇博客后的代码如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 package com.gaolang; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; import org.springframework.cloud.client.circuitbreaker.EnableCircuitBreaker; import org.springframework.cloud.client.loadbalancer.LoadBalanced; import org.springframework.cloud.netflix.eureka.EnableEurekaClient; import org.springframework.cloud.netflix.hystrix.EnableHystrix; import org.springframework.cloud.openfeign.EnableFeignClients; import org.springframework.context.annotation.Bean; import org.springframework.web.client.RestTemplate; @SpringBootApplication @EnableCircuitBreaker @EnableFeignClients @EnableHystrix public class OrderMain80 { public static void main(String[] args) { SpringApplication.run(OrderMain80.class,args); } @LoadBalanced // 使 RestTemplate 自动支持 Ribbon 负载均衡 @Bean public RestTemplate restTemplate() { return new RestTemplate(); } } 而 controller 层的代码使用熔断器后因如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 @Autowired private OrderFeignClient orderFeignClient; // 注入 Feign 客户端 @PostMapping(value = \u0026#34;/customer/payment/create\u0026#34;) public CommonResult\u0026lt;Payment\u0026gt; create(Payment payment){ return orderFeignClient.create(payment); } @HystrixCommand(fallbackMethod = \u0026#34;listByHystirx\u0026#34;,commandProperties = { @HystrixProperty(name = \u0026#34;circuitBreaker.requestVolumeThreshold\u0026#34;, value = \u0026#34;5\u0026#34;), //请求次数 }) //如果请求次数达到5次都是失败，那么直接调用listByHystirx @GetMapping(value = \u0026#34;/customer/payment/{id}\u0026#34;) public CommonResult\u0026lt;Payment\u0026gt; getPaymentById(@PathVariable(\u0026#34;id\u0026#34;) Long id){ CommonResult result = orderFeignClient.getPaymentById(id); System.out.println(\u0026#34;result: \u0026#34; + result); return result; } // 修改后的回退方法 public CommonResult\u0026lt;Payment\u0026gt; listByHystirx(Long id) { return new CommonResult\u0026lt;\u0026gt;(444, \u0026#34;服务端已停止服务\u0026#34;, null); } 因为这是单个 api 接口的回退方法所以\n回退方法 listByHystirx 的参数类型必须与 getPaymentById 方法完全一致，即 Long id。 回退方法的返回类型也必须与 getPaymentById 保持一致，即 CommonResult ","date":"2024-12-19T16:42:34+08:00","permalink":"http://localhost:1313/p/spring-cloud-hystrix%E7%86%94%E6%96%AD%E5%99%A8%E7%9A%84%E4%BD%BF%E7%94%A8%E6%9C%8D%E5%8A%A1%E9%99%8D%E7%BA%A7/","title":"Spring Cloud Hystrix熔断器的使用（服务降级）"},{"content":"前言 紧接我的上一篇博客\nSpringCloud Nacos+ribbon 的实现方法-CSDN 博客\n这里将替换调原来使用 restTemplate 调用 url 和使用拼接字符串指定地址，这里先建议了解一下两种传统方法在 controller 的使用。\nSpringCloud Nacos + Ribbon 调用服务的 2 种方法！_resttemplate nacos-CSDN 博客\n了解完后才能理解 fegin 的方便与可取之处\n相当于是将其它模块的 service 和 serviceimpl 全部写在了 FeginClient 中\n这是消费者的结构，而提供者和综合类的结构不进行改变\nOrderFeignClient 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 package com.gaolang.FeignClient; import com.gaolang.entities.CommonResult; import com.gaolang.entities.Payment; import org.springframework.cloud.openfeign.FeignClient; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.PathVariable; import org.springframework.web.bind.annotation.PostMapping; @FeignClient(value = \u0026#34;cloud-provider-payment8001\u0026#34;) // 指定调用的服务名称 public interface OrderFeignClient { @PostMapping(value = \u0026#34;/payment/create\u0026#34;) CommonResult create(Payment payment); // 创建支付记录 @GetMapping(value = \u0026#34;/payment/{id}\u0026#34;) CommonResult getPaymentById(@PathVariable(\u0026#34;id\u0026#34;) Long id); // 根据 ID 获取支付记录 } OrderController 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 package com.gaolang.controller; import com.gaolang.FeignClient.OrderFeignClient; import com.gaolang.entities.CommonResult; import com.gaolang.entities.Payment; import lombok.extern.slf4j.Slf4j; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.web.bind.annotation.*; import org.springframework.web.client.RestTemplate; import javax.annotation.Resource; @RestController @Slf4j public class OrderController { // @Resource // private RestTemplate restTemplate; // // // 服务提供者的名称 // private static final String PAYMENT_URL = \u0026#34;http://cloud-provider-payment8001\u0026#34;; // // @PostMapping(\u0026#34;customer/payment/create\u0026#34;) // public CommonResult\u0026lt;Payment\u0026gt; create(Payment payment) { // return restTemplate.postForObject(PAYMENT_URL + \u0026#34;/payment/create\u0026#34;, payment, CommonResult.class); // } // // @GetMapping(\u0026#34;customer/payment/{id}\u0026#34;) // public CommonResult\u0026lt;Payment\u0026gt; getPaymentById(@PathVariable(\u0026#34;id\u0026#34;) Long id) { // CommonResult result = restTemplate.getForObject(PAYMENT_URL + \u0026#34;/payment/\u0026#34; + id, CommonResult.class); // System.out.println(\u0026#34;result: \u0026#34; + result); // return result; // } @Autowired private OrderFeignClient orderFeignClient; // 注入 Feign 客户端 @PostMapping(value = \u0026#34;/customer/payment/create\u0026#34;) public CommonResult\u0026lt;Payment\u0026gt; create(Payment payment){ return orderFeignClient.create(payment); } @GetMapping(value = \u0026#34;/customer/payment/{id}\u0026#34;) public CommonResult\u0026lt;Payment\u0026gt; getPaymentById(@PathVariable(\u0026#34;id\u0026#34;) Long id){ CommonResult result = orderFeignClient.getPaymentById(id); System.out.println(\u0026#34;result: \u0026#34; + result); return result; } } application.yml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 server: port: 80 spring: cloud: nacos: discovery: server-addr: 127.0.0.1:8848 # 配置nacos 服务端地址 application: name: cloud-customer-order80 feign: client: config: default: # default全局的配置 loggerLevel: BASIC # 日志级别，BASIC就是基本的请求和响应信息 httpclient: enabled: true # 开启feign对HttpClient的支持 max-connections: 200 # 最大的连接数 max-connections-per-route: 50 # 每个路径的最大连接数 这里我搜集了大量的资料了解了下，后续会更加深入了解这部分的关系。 SpringCloud Feign 远程调用（史上最详细讲解）-阿里云开发者社区\n","date":"2024-12-17T14:40:37+08:00","permalink":"http://localhost:1313/p/springcloud-fegin%E7%9A%84%E4%BD%BF%E7%94%A8/","title":"SpringCloud Fegin的使用"},{"content":"前提 【SpringCloud】IDEA 如何创建一个 SpringCloud 项目_idea 新建一个 springcloud 项目-CSDN 博客\n根据该博客先创建一个微服务的大体框架\n[小白学 Nacos] Nacos 安装，部署，配置，快速入门_nacos 安装配置和部署教程-CSDN 博客\n在配置 spring cloud 的 nacos 和 ribbon 前得先下载 Nacos 在本地运行起来\n如下图\n改正本体框架的 pom.xml 和 yml，公共类不改变，消费者和提供者得进行改变\ncloud-customer-order80 改变 OrderController，使用@LoadBalanced 和 RestTemplate\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 package com.gaolang.controller; import com.gaolang.entities.CommonResult; import com.gaolang.entities.Payment; import lombok.extern.slf4j.Slf4j; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.PathVariable; import org.springframework.web.bind.annotation.PostMapping; import org.springframework.web.bind.annotation.RestController; import org.springframework.web.client.RestTemplate; import javax.annotation.Resource; @RestController @Slf4j public class OrderController { @Resource private RestTemplate restTemplate; // 服务提供者的名称 private static final String PAYMENT_URL = \u0026#34;http://cloud-provider-payment8001\u0026#34;; @PostMapping(\u0026#34;customer/payment/create\u0026#34;) public CommonResult\u0026lt;Payment\u0026gt; create(Payment payment) { return restTemplate.postForObject(PAYMENT_URL + \u0026#34;/payment/create\u0026#34;, payment, CommonResult.class); } @GetMapping(\u0026#34;customer/payment/{id}\u0026#34;) public CommonResult\u0026lt;Payment\u0026gt; getPaymentById(@PathVariable(\u0026#34;id\u0026#34;) Long id) { CommonResult result = restTemplate.getForObject(PAYMENT_URL + \u0026#34;/payment/\u0026#34; + id, CommonResult.class); System.out.println(\u0026#34;result: \u0026#34; + result); return result; } } application.yml\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 server: port: 80 spring: cloud: nacos: discovery: server-addr: 127.0.0.1:8848 # 配置nacos 服务端地址 application: name: cloud-customer-order80 该模块下 pom.xml\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;project xmlns=\u0026#34;http://maven.apache.org/POM/4.0.0\u0026#34; xmlns:xsi=\u0026#34;http://www.w3.org/2001/XMLSchema-instance\u0026#34; xsi:schemaLocation=\u0026#34;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\u0026#34;\u0026gt; \u0026lt;parent\u0026gt; \u0026lt;artifactId\u0026gt;dependencies\u0026lt;/artifactId\u0026gt; \u0026lt;groupId\u0026gt;org.example\u0026lt;/groupId\u0026gt; \u0026lt;version\u0026gt;1.0-SNAPSHOT\u0026lt;/version\u0026gt; \u0026lt;/parent\u0026gt; \u0026lt;modelVersion\u0026gt;4.0.0\u0026lt;/modelVersion\u0026gt; \u0026lt;artifactId\u0026gt;cloud-customer-order80\u0026lt;/artifactId\u0026gt; \u0026lt;properties\u0026gt; \u0026lt;maven.compiler.source\u0026gt;8\u0026lt;/maven.compiler.source\u0026gt; \u0026lt;maven.compiler.target\u0026gt;8\u0026lt;/maven.compiler.target\u0026gt; \u0026lt;/properties\u0026gt; \u0026lt;dependencies\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.example\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;cloud-api-commons\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${project.version}\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-web\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-actuator\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.projectlombok\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;lombok\u0026lt;/artifactId\u0026gt; \u0026lt;optional\u0026gt;true\u0026lt;/optional\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-test\u0026lt;/artifactId\u0026gt; \u0026lt;scope\u0026gt;test\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.netflix.ribbon\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;ribbon-loadbalancer\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;2.3.0\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!-- loadbalancer --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.cloud\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-cloud-starter-loadbalancer\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;/dependencies\u0026gt; \u0026lt;/project\u0026gt; cloud-provider-payment8001 application.yml\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 server: port: 8001 spring: cloud: nacos: discovery: server-addr: 127.0.0.1:8848 # 配置nacos 服务端地址 application: name: cloud-provider-payment8001 datasource: type: com.alibaba.druid.pool.DruidDataSource driver-class-name: com.mysql.cj.jdbc.Driver url: jdbc:mysql://localhost:3306/springcloudtest?serverTimezone=UTC\u0026amp;useUnicode=true\u0026amp;characterEncoding=utf8\u0026amp;useSSL=false username: root password: ****** mybatis: mapper-locations: classpath:mapper/*.xml type-aliases-package: com.gaolang.entities # 所有Entity 别名类所在包 该模块下的 pom.xml\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;project xmlns=\u0026#34;http://maven.apache.org/POM/4.0.0\u0026#34; xmlns:xsi=\u0026#34;http://www.w3.org/2001/XMLSchema-instance\u0026#34; xsi:schemaLocation=\u0026#34;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\u0026#34;\u0026gt; \u0026lt;parent\u0026gt; \u0026lt;artifactId\u0026gt;dependencies\u0026lt;/artifactId\u0026gt; \u0026lt;groupId\u0026gt;org.example\u0026lt;/groupId\u0026gt; \u0026lt;version\u0026gt;1.0-SNAPSHOT\u0026lt;/version\u0026gt; \u0026lt;/parent\u0026gt; \u0026lt;modelVersion\u0026gt;4.0.0\u0026lt;/modelVersion\u0026gt; \u0026lt;artifactId\u0026gt;cloud-provider-payment8001\u0026lt;/artifactId\u0026gt; \u0026lt;properties\u0026gt; \u0026lt;maven.compiler.source\u0026gt;8\u0026lt;/maven.compiler.source\u0026gt; \u0026lt;maven.compiler.target\u0026gt;8\u0026lt;/maven.compiler.target\u0026gt; \u0026lt;/properties\u0026gt; \u0026lt;dependencies\u0026gt; \u0026lt;!--导入公共部分实体类cloud-api-commons--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.example\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;cloud-api-commons\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${project.version}\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-web\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-actuator\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.mybatis.spring.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;mybatis-spring-boot-starter\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.alibaba\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;druid-spring-boot-starter\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;1.1.10\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!--mysql-connector-java--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;mysql\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;mysql-connector-java\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!--jdbc--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-jdbc\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.projectlombok\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;lombok\u0026lt;/artifactId\u0026gt; \u0026lt;optional\u0026gt;true\u0026lt;/optional\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-test\u0026lt;/artifactId\u0026gt; \u0026lt;scope\u0026gt;test\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;/dependencies\u0026gt; \u0026lt;/project\u0026gt; 总的 pom.xmlu0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;project xmlns=\u0026#34;http://maven.apache.org/POM/4.0.0\u0026#34; xmlns:xsi=\u0026#34;http://www.w3.org/2001/XMLSchema-instance\u0026#34; xsi:schemaLocation=\u0026#34;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\u0026#34;\u0026gt; \u0026lt;modelVersion\u0026gt;4.0.0\u0026lt;/modelVersion\u0026gt; \u0026lt;modules\u0026gt; \u0026lt;module\u0026gt;cloud-api-commons\u0026lt;/module\u0026gt; \u0026lt;module\u0026gt;cloud-provider-payment8001\u0026lt;/module\u0026gt; \u0026lt;module\u0026gt;cloud-customer-order80\u0026lt;/module\u0026gt; \u0026lt;/modules\u0026gt; \u0026lt;parent\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-parent\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;2.4.2\u0026lt;/version\u0026gt; \u0026lt;/parent\u0026gt; \u0026lt;groupId\u0026gt;org.example\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;dependencies\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;1.0-SNAPSHOT\u0026lt;/version\u0026gt; \u0026lt;name\u0026gt;dependencies\u0026lt;/name\u0026gt; \u0026lt;description\u0026gt;统一依赖\u0026lt;/description\u0026gt; \u0026lt;packaging\u0026gt;pom\u0026lt;/packaging\u0026gt; \u0026lt;properties\u0026gt; \u0026lt;java.version\u0026gt;1.8\u0026lt;/java.version\u0026gt; \u0026lt;java.source\u0026gt;1.8\u0026lt;/java.source\u0026gt; \u0026lt;project.build.sourceEncoding\u0026gt;UTF-8\u0026lt;/project.build.sourceEncoding\u0026gt; \u0026lt;project.reporting.outputEncoding\u0026gt;UTF-8\u0026lt;/project.reporting.outputEncoding\u0026gt; \u0026lt;spring-cloud.version\u0026gt;2020.0.1\u0026lt;/spring-cloud.version\u0026gt; \u0026lt;spring-cloud-alibaba.version\u0026gt;2021.1\u0026lt;/spring-cloud-alibaba.version\u0026gt; \u0026lt;spring-bootstrap.version\u0026gt;3.0.3\u0026lt;/spring-bootstrap.version\u0026gt; \u0026lt;commons.version\u0026gt;3.12.0\u0026lt;/commons.version\u0026gt; \u0026lt;fastjson.version\u0026gt;1.2.78\u0026lt;/fastjson.version\u0026gt; \u0026lt;/properties\u0026gt; \u0026lt;dependencyManagement\u0026gt; \u0026lt;dependencies\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.cloud\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-cloud-dependencies\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${spring-cloud.version}\u0026lt;/version\u0026gt; \u0026lt;type\u0026gt;pom\u0026lt;/type\u0026gt; \u0026lt;scope\u0026gt;import\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.alibaba.cloud\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-cloud-alibaba-dependencies\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${spring-cloud-alibaba.version}\u0026lt;/version\u0026gt; \u0026lt;type\u0026gt;pom\u0026lt;/type\u0026gt; \u0026lt;scope\u0026gt;import\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.mysql\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;mysql-connector-j\u0026lt;/artifactId\u0026gt; \u0026lt;scope\u0026gt;runtime\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.alibaba\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;druid\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;1.2.6\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.mybatis.spring.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;mybatis-spring-boot-starter\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;2.2.2\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!--spring cloud Hoxton.SR1--\u0026gt; \u0026lt;!-- \u0026lt;dependency\u0026gt;--\u0026gt; \u0026lt;!-- \u0026lt;groupId\u0026gt;org.springframework.cloud\u0026lt;/groupId\u0026gt;--\u0026gt; \u0026lt;!-- \u0026lt;artifactId\u0026gt;spring-cloud-dependencies\u0026lt;/artifactId\u0026gt;--\u0026gt; \u0026lt;!-- \u0026lt;version\u0026gt;Hoxton.SR1\u0026lt;/version\u0026gt;--\u0026gt; \u0026lt;!-- \u0026lt;type\u0026gt;pom\u0026lt;/type\u0026gt;--\u0026gt; \u0026lt;!-- \u0026lt;scope\u0026gt;import\u0026lt;/scope\u0026gt;--\u0026gt; \u0026lt;!-- \u0026lt;/dependency\u0026gt;--\u0026gt; \u0026lt;!--junit--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;junit\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;junit\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;3.8.1\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!--log4j--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;log4j\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;log4j\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;1.2.12\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;/dependencies\u0026gt; \u0026lt;/dependencyManagement\u0026gt; \u0026lt;dependencies\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-actuator\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.alibaba.cloud\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-cloud-starter-alibaba-nacos-discovery\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.alibaba.cloud\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-cloud-starter-alibaba-nacos-config\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.cloud\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-cloud-starter-bootstrap\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${spring-bootstrap.version}\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.alibaba\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;fastjson\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${fastjson.version}\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.projectlombok\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;lombok\u0026lt;/artifactId\u0026gt; \u0026lt;optional\u0026gt;true\u0026lt;/optional\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.apache.commons\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;commons-lang3\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${commons.version}\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;/dependencies\u0026gt; \u0026lt;build\u0026gt; \u0026lt;plugins\u0026gt; \u0026lt;plugin\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-maven-plugin\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;2.7.5\u0026lt;/version\u0026gt; \u0026lt;/plugin\u0026gt; \u0026lt;/plugins\u0026gt; \u0026lt;/build\u0026gt; \u0026lt;/project\u0026gt; 实现结果 ","date":"2024-12-16T21:46:08+08:00","permalink":"http://localhost:1313/p/springcloud-nacos-ribbon%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%B3%95/","title":"SpringCloud Nacos+ribbon的实现方法"},{"content":"介绍 在使用宝塔面板之前得先开个服务器，我这里使用的是阿里云服务器。\n安全组添加一下接口：\n远程连接至面板：\n宝塔面板下载指令：\n根据当前操作系统\n宝塔面板下载，免费全能的服务器运维软件\n在宝塔官网根据操作系统的配置选择命令输入到远程连接的面板中下载宝塔面板。\n进入宝塔面板后是这样的\n后端在宝塔面板部署 jar 包 这是 phpmyadmin 的问题，得先去卸载 java 环境下载后的 phpmyadmin 再重新下载，之后就可以正常进入 phpmyadmin 的操作面板。\n宝塔面板 phpMyAdmin 报 405 not allowed 错误及 PHP 与 phpMyAdmin 不兼容问题_phpmyadmin 405 not allowed-CSDN 博客\n选择对应的版本在软件商店进行下载。\n对于 jar 包的测试得先下载 tomcat，而 jdk 可以选择 jar 包中携带的 jdk 版本。\n打包 spring boot 项目的 jar 包 在打包前我这里因为 spring cloud 踩了个坑，settings.xml 的 maven 镜像出现了问题，会爆红找不到\nspring-boot.version。\n上映射路径对比一下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 \u0026lt;mirrors\u0026gt; \u0026lt;!-- 这是spring cloud的镜像路径 --\u0026gt; \u0026lt;mirror\u0026gt; \u0026lt;id\u0026gt;nexus-aliyun\u0026lt;/id\u0026gt; \u0026lt;mirrorOf\u0026gt;Maven\u0026lt;/mirrorOf\u0026gt; \u0026lt;name\u0026gt;Nexus aliyun\u0026lt;/name\u0026gt; \u0026lt;url\u0026gt;https://maven.aliyun.com/repository/public\u0026lt;/url\u0026gt; \u0026lt;/mirror\u0026gt; \u0026lt;!-- 这是spring boot的镜像路径 --\u0026gt; \u0026lt;mirror\u0026gt; \u0026lt;id\u0026gt;alimaven\u0026lt;/id\u0026gt; \u0026lt;name\u0026gt;aliyun maven\u0026lt;/name\u0026gt; \u0026lt;url\u0026gt;http://maven.aliyun.com/nexus/content/groups/public/\u0026lt;/url\u0026gt; \u0026lt;mirrorOf\u0026gt;*\u0026lt;/mirrorOf\u0026gt; \u0026lt;/mirror\u0026gt; \u0026lt;/mirrors\u0026gt; spring cloud 项目和 spring boot 项目的镜像转换，我用了两个 settings.xml，以后在 idea 中切换 maven 的 xml 路径就可以了，这里把 jar 包打出来后面有用。\n数据库的数据转成 sql 文件 我用的数据库是 MySql，软件用的是 Navicat\n转存后可以得到一个 sql 文件\n之后我们会用到这些东西。\n宝塔面板部署数据库和 jar 包 最好根据你项目的 yml 配置去配置当前宝塔面板的数据库的数据库名，用户名，密码\n举一个例子：\n这里我的 jar 包配置文件如图所示：\n数据库名：blog\nusername：blog\npassword：20050101\n宝塔面板配置和其一样\n之后我们便要使用到上文中转存的 sql 文件，将数据同步入数据库。\n在这里设置数据库访问的密码，用来进入 phpmyadmin 的操作面板对数据库进行操作。\n用户默认都是 root，密码就是刚才设置的值\n部署完数据库和 jar 包后记得去服务器的安全组和宝塔面板的防火墙开放端口号。\n开放完端口号后就可以去测试 api 接口是否能拉取到数据库的数据，我这里使用 postman 进行调试。\n测试完 8081 和 8082 端口都可以获取到数据\n宝塔面板部署前端 vue 项目 在 vue 项目中使用命令\nnpm run build 去打包 vue 项目成 dist 文件夹，如果文件夹内容过大，可以再打包成 rar 格式\n然后我们进入宝塔面板先根据我们的域名和 ip 地址创建 php 项目来构建 vue 项目\n然后去文件夹创建的根目录下去把刚才的 dist 文件夹或者 rar 拖入\n把网站站点改到 dist 目录下：\n这样一个 vue 项目就发布到公网 ip 上了。\n这里部署前端记得改一下这个地方，防止后面加后缀访问页面报错。\n","date":"2024-12-16T21:38:47+08:00","permalink":"http://localhost:1313/p/%E5%88%A9%E7%94%A8%E5%AE%9D%E5%A1%94%E9%9D%A2%E6%9D%BF%E5%BF%AB%E9%80%9F%E9%83%A8%E7%BD%B2%E5%89%8D%E5%90%8E%E7%AB%AF%E4%BB%A3%E7%A0%81/","title":"利用宝塔面板快速部署前后端代码"},{"content":"建站技术 | HUGO + GitHub 创建博客页面 1.前言 我通过参考大量的hugo框架的使用，最后终于在收集整理并使用得出了较好的部署方式。 先将我使用到的网站地址全放在前言供大家查阅与使用（并附带说明）。\n简略建站的前提文章： 【Hugo】Hugo + Github 免费部署自己的博客\n后续跟进的博客内容文章： 建站技术 | 使用 Hugo + Stack 简单搭建一个博客\n我主要使用了这两篇博客的内容，其中详细的使用我会娓娓道来。\n2.hugo下载 下载地址：标签 · gohugoio/hugo\n3.搭建博客 3.1 在hugo.exe所在文件夹的地址栏敲打cmd，然后Enter唤起命令行 3.2 敲打命令hugo new site xxxx创建hugo文件 3.3 敲打命名cd xxxx切换目录，并把hugo.exe复制到刚生成的文件夹中 3.4 敲打命令hugo server -D启动服务，访问http://localhost:1313，Ctrl+C停止服务 3.5 配置主题 主题下载地址：Complete List | Hugo Themes\n我们这里以stack主题为例：发行版 · CaiJimmy/hugo-theme-stack\n这边以【Stack主题】为例，将下载好的主题解压，放到/themes文件夹中并将文件夹重新命名为hugo-theme-stack\n将exampleSite样例数据中的 Content 和 hugo.yaml 复制到主文件夹中，并删掉hugo.toml和content/post/rich-content\n再次启动hugo服务，查看主题，具体主题配置修改 hugo.yaml，这里不细说，感兴趣可自行查找相关文章\n至此，在本地搭建一个博客已经完成了\n3.6 了解hugo框架的逻辑 因为本人在借鉴他人的博客时，其实还是会有许多不懂的地方，所以就对结构进行了些许分析，希望能给后续读者提供一些帮助。\n在archetypes下是生成markdown文件的模板\n可以和我的模板使用一样\ncategories.md 和 tags.md\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 --- title: \u0026#34;{{ replace .Name \u0026#34;-\u0026#34; \u0026#34; \u0026#34; | title }}\u0026#34; slug: \u0026#34;{{ replace .Name \u0026#34;-\u0026#34; \u0026#34; \u0026#34; | title }}\u0026#34; description: image: cover.png style: background: \u0026#34;#2a9d8f\u0026#34; color: \u0026#34;#fff\u0026#34; --- default.md\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 --- title: \u0026#34;{{ replace .Name \u0026#34;-\u0026#34; \u0026#34; \u0026#34; | title }}\u0026#34; slug: \u0026#34;{{ replace .Name \u0026#34;-\u0026#34; \u0026#34; \u0026#34; | title }}\u0026#34; description: date: \u0026#34;{{ .Date }}\u0026#34; lastmod: \u0026#34;{{ .Date }}\u0026#34; image: cover.png math: license: hidden: false draft: false categories: [\u0026#34;\u0026#34;] tags: [\u0026#34;\u0026#34;] --- ## 附录 ### 参考文献 ### 版权信息 在content下的是分类，导航栏，博客的发布首页\n一般我们的博客发布都在content/post这个文件夹中\n而图中的img文件夹是我们的头像的存放地址，可以直接将avatar.png替换掉，也可以像我一样放进去图片后去yaml文件中改配置类。\n4.hugo.yaml 4.1 配置导航栏左侧的图标并能够响应 话不多说，先上代码\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 social: - identifier: github name: GitHub url: https://github.com/Demonskirito params: icon: github - identifier: twitter name: Twitter url: https://twitter.com params: icon: twitter - identifier: bilibili name: bilibili url: https://space.bilibili.com/268011948 params: icon: bilibili-line - identifier: email name: Email url: mailto:wh2919907118@gamil.com params: icon: email 这是我的导航栏图标配置，在这里我使用的svg是从iconfont-阿里巴巴矢量图标库获取的，svg的尺寸设置24寸，颜色选择#2c3e50，将下载下来的图标放到 \\assets\\icons\\ 文件夹（themes下的）下，然后修改社交媒体的配置。\n将所有的 #2c3e50 都替换成 currentColor，也就是使用样式设置的颜色。\n4.2配置评论功能 博客中的评论系统是很重要的。这里我使用的是 Stack 模板支持的 Waline，搭建很简单，可以参考 Waline 官方指南\n配置 Waline 则可以参考这篇博客 hugo：添加评论功能（Waline） - 建站指南，我的 Waline 配置：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 comments: enabled: true provider: waline waline: # 这里填你的vercel服务器地址。 # vercel自定义域名会和cloudflare会冲突导致无限301,所以干脆直接用送的域名了 # 注意要部署总域名，而不是最新部署的版本域名（中间有一段随机英文字符的），否则会报 401 Unauthorized serverURL: https://waline-你的用户名.vercel.app/ lang: zh-CN # 文章浏览量统计，在新版waline中已更名为pageview属性，貌似用不了了 # 填入false代表不启用，填入字符串的时候会作为css选择器 visitor: false # 头像来源，在V2中已移除该属性 avatar: emoji: - https://npm.elemecdn.com/@waline/emojis@1.1.0/bilibili - https://npm.elemecdn.com/@waline/emojis@1.1.0/bmoji - https://npm.elemecdn.com/@waline/emojis@1.1.0/weibo # 回复时必填的内容 requiredMeta: - name - email - url # 评论框的默认的文字 placeholder: 欢迎留下宝贵的评论！ # 自定义语言设置，参考https://waline.js.org/cookbook/customize/locale.html#locale-%E9%80%89%E9%A1%B9 locale: admin: 站长 sofa: 还没有人评论哦！快来抢沙发吧~ LeadCloud的部署还是非常简单的，建议使用国际版，畅通无阻啊\nVercel的部署，你需要先去登录注册后在去拉取waline的项目创建进入github中\n创建的时候页面应该如下图：\n我是按照文献的步骤一步步来的，所以没有问题，大家安心配就行。\n5.使用 Hugo 创建文章 为了更加快捷的创建文章，我这里将命令简化为bat指令，一共三个bat\n创建标签.bat\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 @echo off :: 显示创建标签提示 echo [创建标签] :: 提示输入标签名 set /p input=请输入标签名: :: 检查用户是否输入内容 if \u0026#34;%input%\u0026#34;==\u0026#34;\u0026#34; ( echo 标签名不能为空，请重新运行脚本。 pause exit /b ) :: 使用 Hugo 创建标签 hugo new tags/%input%/_index.md :: 暂停脚本，等待用户 创建类别.bat\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 @echo off :: 显示创建类别提示 echo [创建类别] :: 提示输入类别名 set /p input=请输入类别名: :: 检查用户是否输入内容 if \u0026#34;%input%\u0026#34;==\u0026#34;\u0026#34; ( echo 类别名不能为空，请重新运行脚本。 pause exit /b ) :: 使用 Hugo 创建类别 hugo new categories/%input%/_index.md :: 暂停脚本，等待用户确认 pause 创建文章.bat\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 @echo off :: 创建文章 echo [创建文章] :: 提示输入 Slug set /p input=请输入文章 Slug: :: 获取当前日期时间 for /f \u0026#34;tokens=2 delims==\u0026#34; %%i in (\u0026#39;wmic os get localdatetime /value ^| find \u0026#34;=\u0026#34;\u0026#39;) do set datetime=%%i set year=%datetime:~0,4% set month=%datetime:~4,2% set day=%datetime:~6,2% :: 使用 Hugo 创建新文章 hugo new post/%year%/%month%%day%-%input%/index.md :: 暂停脚本，等待用户确认 pause 6.生成静态网页 在完成编写之后，就可以生成网页了。\n运行以下命令：\n1 hugo 或携带一些参数\n1 hugo --theme=stack --baseUrl=\u0026#34;https://blog.reincarnatey.net/\u0026#34; 随后可以看到根目录下出现了 public 文件夹，该文件夹下就是生成的静态网页。你可以将该文件夹内的文件上传到服务器，或是 push 到你的 github 仓库部署到你使用的托管服务，访问你的域名就可以看到了。\n7.将博客项目部署到GitHub上 先创建一个仓库\n以下是我创建好后传入仓库的图片 创建仓库时以\u0026lt;用户名小写\u0026gt;.github.io，例如我叫Demonskirito 仓库就命名为 demonskirito.github.io\n在项目中将已生成的静态代码的文件夹（public）上传至当前仓库即可\n1 2 3 4 5 6 7 ##先进入public文件夹 git init git add . git commit -m\u0026#34;我的博客\u0026#34; git remote add origin https://github.com/Demonskirito/demonskirito.github.io.git git branch -M main git push -u origin main 在上传https时我经常会遇见这个问题\n1 E:\\Study\\blog-hugo\\hugo-test\\public\u0026gt;git push -u origin main fatal: unable to access \u0026#39;https://github.com/Demonskirito/demonskirito.github.io.git/\u0026#39;: Failed to connect to 127.0.0.1 port 7897 after 2084 ms: Couldn\u0026#39;t connect to server 可以通过以下方法解决\n清除 Git 全局代理设置\n1 2 git config --global --unset http.proxy git config --global --unset https.proxy 清除系统代理（如果设置了环境变量） 在 Windows 中，打开命令提示符（cmd）或 PowerShell，执行：\n1 2 set http_proxy= set https_proxy= 检查直接访问 GitHub 测试是否可以直接访问 GitHub：\n1 curl https://github.com 重新尝试 Git 推送 如果可以直接访问，重新推送代码：\n1 git push -u origin main 实在不行就改用 SSH 连接，这个肯定行\n1 2 3 git remote set-url origin git@github.com:Demonskirito/demonskirito.git git push origin master 当我们将项目推送上github上后，我们就可以去访问demonskirito.github.io，这时你就可以发现我们成功访问我们的前端页面。\n对于github的项目，我们也可以去绑定域名使用。\n8.GitHub仓库绑定域名 8.1 namecheap解析DNS、GitHub配置域名 我使用的是外国域名的提供网站namecheap，在这里你可以买到外国域名，并配置解析dns\n这里我们来详细的说说如何用namecheap解析github pages\n我们在namecheap中添加CNAME记录\n添加一个新的 DNS 记录：\n记录类型：CNAME 主机名（或名称/别名）：www 值（或目标/指向）：demonskirito.github.io TTL：默认即可（通常为 300 秒或 自动）。 8.2 验证根域名（可选） 如果你想让 wuhan.com（不带 www）也指向 GitHub Pages：\n通过 GitHub 的官方推荐，你需要配置一个 A 记录 指向以下 GitHub Pages 的 IP 地址：\n185.199.108.153 185.199.109.153 185.199.110.153 185.199.111.153 配置示例：\n记录类型：A 主机名：@（或留空） 值：上述 IP 地址之一（重复添加多个记录，每条记录对应一个 IP 地址） 如果域名服务商支持 ALIAS 或 ANAME，你可以使用它们直接指向 demonskirito.github.io，但大多数情况下直接使用上述 A 记录即可。\n8.3 等待 DNS 生效 DNS 修改后可能需要一些时间传播，通常 10 分钟到 24 小时不等。你可以使用以下命令检查 DNS 是否正确：\n1 nslookup www.wuhan.com 应该返回以下类似的结果\n1 CNAME demonskirito.github.io 8.4 验证访问 通过浏览器访问 www.wuhan.com 确认是否正确指向你的 GitHub Pages。 如果依然出现问题，请检查 DNS 配置是否生效，或使用工具（如 https://dnschecker.org）验证你的 DNS 配置。 9.参考文献 Hugo+github部署：\n使用Hugo+Github从0开始免费搭建个人博客_hugo github-CSDN博客\n建站技术 | 使用 Hugo + Stack 简单搭建一个博客\n【Hugo】Hugo + Github 免费部署自己的博客\n10.版权信息 该博客归Demonskirito所有\n","date":"2024-12-16T10:30:44+08:00","permalink":"http://localhost:1313/p/%E5%BB%BA%E7%AB%99%E6%8A%80%E6%9C%AF-hugo--github-%E5%88%9B%E5%BB%BA%E5%8D%9A%E5%AE%A2%E9%A1%B5%E9%9D%A2/","title":"建站技术 | HUGO + GitHub 创建博客页面"}]